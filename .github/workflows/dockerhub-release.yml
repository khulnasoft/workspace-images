name: Publish latest images to Docker Hub

on:
  workflow_dispatch:
  # schedule:
  #   - cron: "0 10 * * MON"

jobs:
  # Sync the 'latest' tag from GAR to Docker Hub
  promote-latest:
    if: (github.event_name == 'schedule') || (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    environment: "production"
    permissions:
      contents: "read"
      id-token: "write"
    env:
      DH_IMAGE_REGISTRY: registry.hub.docker.com
      SKOPEO_VERSION: 1.15.2

    steps:
      - name: üì• Checkout workspace-images
        uses: actions/checkout@v4
        with:
          repository: khulnasoft/workspace-images

      - name: üîß Setup tools
        run: |
          sudo apt-get install python3-pip
          sudo pip3 install yq
      - name: üîÜ Setup skopeo
        env:
          SKOPEO_VERSION: ${{env.SKOPEO_VERSION}}
        run: |
          # Generate a temporal file to store skopeo auth
          SKOPEO_AUTH_DIR=$(mktemp -d)
          # to test locally
          # export GITHUB_ENV=$(mktemp)
          echo "SKOPEO_AUTH_DIR=${SKOPEO_AUTH_DIR}" >> $GITHUB_ENV
          # Build a fake skopeo script to run a container
          cat <<EOF | sudo tee /usr/local/bin/skopeo > /dev/null
          #/bin/bash
          docker run --rm \
            -v $SKOPEO_AUTH_DIR:/skopeo.auth \
            -e REGISTRY_AUTH_FILE=/skopeo.auth/auth \
            quay.io/skopeo/stable:v$SKOPEO_VERSION "\$@"
          EOF
          sudo chmod +x /usr/local/bin/skopeo
          # don't fail parsing the file while it contains empty creds the first time
          echo "{}" > $SKOPEO_AUTH_DIR/auth
      - name: ‚úçüèΩ Login to Docker Hub using skopeo
        env:
          docker_user: ${{ secrets.DOCKER_USERNAME }}
          docker_password: ${{ secrets.DOCKER_TOKEN }}
          SKOPEO_AUTH_DIR: ${{env.SKOPEO_AUTH_DIR}}
        run: |
          sudo -E skopeo login -u ${{ env.docker_user }} --password=${{ env.docker_password }} ${{ env.DH_IMAGE_REGISTRY }}
      - name: üê≥ Sync latest tag of images to Docker Hub
        env:
          SKOPEO_AUTH_DIR: ${{env.SKOPEO_AUTH_DIR}}
        run: |
          IMAGES=$(cat .github/promote-images.yml | yq '."europe-docker.pkg.dev/khulnasoft-artifacts/docker-dev"."images-by-tag-regex"|keys[]' -r)
          for IMAGE in $IMAGES;
          do
            sudo -E skopeo copy --format=oci --dest-oci-accept-uncompressed-layers --retry-times=5 \
            docker://${{ env.GAR_IMAGE_REGISTRY }}/khulnasoft-artifacts/docker-dev/$IMAGE:latest \
            docker://${{ env.DH_IMAGE_REGISTRY }}/khulnasoft/$IMAGE:latest
          done
  notify:
    if: always() && ((github.event_name == 'schedule') || (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'))
    needs: promote-latest
    runs-on: ubuntu-latest
    steps:
      - name: The release was successful
        id: slack-success
        if: needs.promote-latest.result == 'success'
        uses: slackapi/slack-github-action@v2.0.0
        with:
          webhook-type: incoming-webhook
          webhook: ${{ secrets.RELEASE_NOTIFY_WEBHOOK }}
          payload: |
            text: "The release was successful :rocket:"
      - name: The release was not successful
        id: slack-failure
        if: needs.promote-latest.result != 'success'
        uses: slackapi/slack-github-action@v2.0.0
        with:
          webhook-type: incoming-webhook
          webhook: ${{ secrets.RELEASE_NOTIFY_WEBHOOK }}
          payload: |
            text: ${{ format('The release had trouble :construction:, the result was: {0}', needs.promote-latest.result) }}
